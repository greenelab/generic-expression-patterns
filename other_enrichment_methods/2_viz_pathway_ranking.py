# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.9.1+dev
#   kernelspec:
#     display_name: Python [conda env:generic_expression] *
#     language: python
#     name: conda-env-generic_expression-py
# ---

# # Visualize pathway ranking
#
# This notebook will visualize pathway ranking obtained by the different enrichment analysis methods.
#
# **Note**: This notebook is expecting outputs for all enrichment methods generated by the [previous notebook](2_apply_enrichment_method.ipynb)
#
# **Implementation note:**
# The project id = GSE11352 for the human cancer analysis did not find any DEGs in the simulated experiments, so we are manually removing the ORA enrichment method for this array analysis. But this method can be added back by removing the conditional statements.

# +
# %load_ext autoreload
# %load_ext rpy2.ipython
# %autoreload 2

import os
import pandas as pd
import numpy as np
import plotnine as pn
from IPython.display import Image, display, SVG
import svgutils.transform as sg
from lxml import etree
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

from ponyo import utils

np.random.seed(123)

# +
# Read in config variables
base_dir = os.path.abspath(os.path.join(os.getcwd(), "../"))

config_filename = os.path.abspath(
    os.path.join(base_dir, "configs", "config_human_general.tsv")
)

params = utils.read_config(config_filename)

# Select platform technology

# platform = ["array", "rnaseq"]
platform = "rnaseq"
# -

# Load params
dataset_name = params["dataset_name"]
project_id = params["project_id"]

# Create dictionary of enrichment method: statistic
method_stats_dict = {"GSEA": "padj", "GSVA": "ES", "CAMERA": "FDR", "ORA": "p.adjust"}

# ## Get pathway summary data

# Pathway summary files
gsea_pathway_summary_filename = os.path.join(
    base_dir, dataset_name, f"generic_pathway_summary_{project_id}.tsv"
)
gsva_pathway_summary_filename = os.path.join(
    base_dir, dataset_name, f"generic_pathway_summary_{project_id}_GSVA.tsv"
)
camera_pathway_summary_filename = os.path.join(
    base_dir, dataset_name, f"generic_pathway_summary_{project_id}_CAMERA.tsv"
)
ora_pathway_summary_filename = os.path.join(
    base_dir, dataset_name, f"generic_pathway_summary_{project_id}_ORA.tsv"
)

# +
# Pathway summary data
gsea_pathway_summary = pd.read_csv(
    gsea_pathway_summary_filename, sep="\t", index_col=0, header=0
)
gsva_pathway_summary = pd.read_csv(
    gsva_pathway_summary_filename, sep="\t", index_col=0, header=0
)
camera_pathway_summary = pd.read_csv(
    camera_pathway_summary_filename, sep="\t", index_col=0, header=0
)

if platform == "rnaseq":
    ora_pathway_summary = pd.read_csv(
        ora_pathway_summary_filename, sep="\t", index_col=0, header=0
    )
# -

# ## Format data for plotting

print(gsea_pathway_summary.shape)
gsea_pathway_summary.head()

print(gsva_pathway_summary.shape)
gsva_pathway_summary.head()

print(camera_pathway_summary.shape)
camera_pathway_summary.head()

if platform == "rnaseq":
    print(ora_pathway_summary.shape)
    ora_pathway_summary.head()


# ## Pathway ranking per enrichment method

# define plotting function
def plot_significance_vs_ranking(
    summary_df, method_name, stats_colname, x_label, data_type, output_figure_filename
):
    # Format input dataframe

    if stats_colname == "ES":
        plot_df = pd.DataFrame(
            data={
                "Test statistic": summary_df[
                    f"Median {stats_colname} (simulated)"
                ].values,
                "Percentile rank": summary_df["Percentile (simulated)"].values,
            },
            index=summary_df.index,
        )
    else:
        plot_df = pd.DataFrame(
            data={
                "Test statistic": -np.log10(
                    summary_df[f"Median {stats_colname} (simulated)"].values
                ),
                "Percentile rank": summary_df["Percentile (simulated)"].values,
            },
            index=summary_df.index,
        )

    fig = pn.ggplot(plot_df, pn.aes(x="Test statistic", y="Percentile rank"))
    fig += pn.geom_point()
    fig += pn.geom_point(
        plot_df[plot_df["Percentile rank"] > 90.0],
        pn.aes(x="Test statistic", y="Percentile rank"),
        color="red",
    )

    # Only used for array data
    # Manually stagger labels since they overlap here
    if data_type == "array":
        if method_name == "GSEA":
            labels = [
                x if plot_df.loc[x, "Percentile rank"] > 90.0 else ""
                for x in plot_df.index
            ]
            labels_1 = [x if x == "HALLMARK_MYC_TARGETS_V1" else "" for x in labels]
            labels_2 = [x if x == "HALLMARK_E2F_TARGETS" else "" for x in labels]
            labels_3 = [x if x == "HALLMARK_G2M_CHECKPOINT" else "" for x in labels]
            labels_4 = [
                x if x == "HALLMARK_INTERFERON_GAMMA_RESPONSE" else "" for x in labels
            ]
            labels_5 = [
                x if x == "HALLMARK_INFLAMMATORY_RESPONSE" else "" for x in labels
            ]
            labels_6 = [
                x if x == "HALLMARK_TNFA_SIGNALING_VIA_NFKB" else "" for x in labels
            ]

            fig += pn.geom_text(
                pn.aes(label=labels_1), ha="right", va="top", size=5, y=102
            )
            fig += pn.geom_text(
                pn.aes(label=labels_2), ha="right", va="bottom", size=5, y=98
            )
            fig += pn.geom_text(
                pn.aes(label=labels_3), ha="right", va="bottom", size=5, y=96
            )
            fig += pn.geom_text(
                pn.aes(label=labels_4), ha="right", va="bottom", size=5, y=94
            )
            fig += pn.geom_text(
                pn.aes(label=labels_5), ha="right", va="bottom", size=5, y=92
            )
            fig += pn.geom_text(
                pn.aes(label=labels_6), ha="right", va="bottom", size=5, y=90
            )
        else:
            fig += pn.geom_text(
                pn.aes(
                    label=[
                        x if plot_df.loc[x, "Percentile rank"] > 90.0 else ""
                        for x in plot_df.index
                    ]
                ),
                ha="right",
                va="top",
                size=5,
            )

    # If using RNA-seq
    if data_type == "rnaseq":
        fig += pn.geom_text(
            pn.aes(
                label=[
                    x if plot_df.loc[x, "Percentile rank"] > 90.0 else ""
                    for x in plot_df.index
                ]
            ),
            ha="right",
            va="top",
            size=5,
        )
        fig += pn.labs(
            x=x_label,
            y="Commonly enriched (percentile of ranking)",
            title=f"{method_name} pathway statistics $v.s.$ ranking",
        )
        fig += pn.theme_bw()
        fig += pn.theme(
            legend_title_align="center",
            plot_background=pn.element_rect(fill="white"),
            legend_key=pn.element_rect(fill="white", colour="white"),
            legend_title=pn.element_text(family="sans-serif", size=15),
            legend_text=pn.element_text(family="sans-serif", size=12),
            plot_title=pn.element_text(family="sans-serif", size=15),
            axis_text=pn.element_text(family="sans-serif", size=12),
            axis_title=pn.element_text(family="sans-serif", size=15),
        )

    # Save figure
    fig.save(
        output_figure_filename,
        format="svg",
        bbox_inches="tight",
        transparent=True,
        pad_inches=0,
        dpi=300,
    )
    print(fig)


plot_significance_vs_ranking(
    gsea_pathway_summary,
    "GSEA",
    "adj p-value",
    r"-Log$_{10}$(median(adjusted $P$-value))",
    "rnaseq",
    "GSEA_pathway_ranking.svg",
)

plot_significance_vs_ranking(
    gsva_pathway_summary,
    "GSVA",
    "ES",
    "Median(enrichment score)",
    "rnaseq",
    "GSVA_pathway_ranking.svg",
)

plot_significance_vs_ranking(
    camera_pathway_summary,
    "CAMERA",
    "adj p-value",
    r"-Log$_{10}$(median(FDR))",
    "rnaseq",
    "CAMERA_pathway_ranking.svg",
)

if platform == "rnaseq":
    plot_significance_vs_ranking(
        ora_pathway_summary,
        "ORA",
        "adj p-value",
        r"-Log$_{10}$(median(adjusted $P$-value)))",
        "rnaseq",
        "ORA_pathway_ranking.svg",
    )


# ## Compare pathway ranking across enrichment methods

# define plotting function
def plot_paired_ranking(
    method1_summary_df,
    method2_summary_df,
    method1_name,
    method2_name,
    output_figure_filename,
):
    # Join dataframes to make sure the rows are aligned
    merged_summary_df = method1_summary_df.merge(
        method2_summary_df,
        left_index=True,
        right_index=True,
        suffixes=[f"_{method1_name}", f"_{method2_name}"],
    )

    # Format input dataframe
    plot_df = pd.DataFrame(
        data={
            "Method1 ranking": merged_summary_df[
                f"Percentile (simulated)_{method1_name}"
            ].values,
            "Method2 ranking": merged_summary_df[
                f"Percentile (simulated)_{method2_name}"
            ].values,
        },
        index=merged_summary_df.index,
    )
    fig = pn.ggplot(plot_df, pn.aes(x="Method1 ranking", y="Method2 ranking"))
    fig += pn.geom_point()
    fig += pn.labs(
        x=f"{method1_name} pathway ranking",
        y=f"{method2_name} pathway ranking",
        title=f"{method1_name} $v.s.$ {method2_name} pathway ranking",
    )
    fig += pn.theme_bw()
    fig += pn.theme(
        legend_title_align="center",
        plot_background=pn.element_rect(fill="white"),
        legend_key=pn.element_rect(fill="white", colour="white"),
        legend_title=pn.element_text(family="sans-serif", size=15),
        legend_text=pn.element_text(family="sans-serif", size=12),
        plot_title=pn.element_text(family="sans-serif", size=15),
        axis_text=pn.element_text(family="sans-serif", size=12),
        axis_title=pn.element_text(family="sans-serif", size=15),
    )

    # Save figure
    fig.save(
        output_figure_filename,
        format="svg",
        bbox_inches="tight",
        transparent=True,
        pad_inches=0,
        dpi=300,
    )
    print(fig)


plot_paired_ranking(
    gsea_pathway_summary,
    gsva_pathway_summary,
    "GSEA",
    "GSVA",
    "gsea_gsva_compare_ranking.svg",
)

plot_paired_ranking(
    gsea_pathway_summary,
    camera_pathway_summary,
    "GSEA",
    "CAMERA",
    "gsea_camera_compare_ranking.svg",
)

if platform == "rnaseq":
    plot_paired_ranking(
        gsea_pathway_summary,
        ora_pathway_summary,
        "GSEA",
        "ORA",
        "gsea_ora_compare_ranking.svg",
    )

plot_paired_ranking(
    gsva_pathway_summary,
    camera_pathway_summary,
    "GSVA",
    "CAMERA",
    "gsva_camera_compare_ranking.svg",
)

if platform == "rnaseq":
    plot_paired_ranking(
        gsva_pathway_summary,
        ora_pathway_summary,
        "GSVA",
        "ORA",
        "gsva_ora_compare_ranking.svg",
    )

if platform == "rnaseq":
    plot_paired_ranking(
        camera_pathway_summary,
        ora_pathway_summary,
        "CAMERA",
        "ORA",
        "camera_ora_compare_ranking.svg",
    )


# ## Assemble plots into figure
#

def make_figure_panel(filename, scale_x_input, scale_y_input, x_loc, y_loc):
    panel = sg.fromfile(filename)

    panel_size = (
        np.round(float(panel.root.attrib["width"][:-2]) * 1.33, 0),
        np.round(float(panel.root.attrib["height"][:-2]) * 1.33, 0),
    )

    scale_x = scale_x_input
    scale_y = scale_y_input

    print(f"original: {panel_size}")
    print(f"scaled:{(panel_size[0]*scale_x,panel_size[1]*scale_y)}")

    panel = panel.getroot()
    panel.scale_xy(x=scale_x, y=scale_y)
    panel.moveto(x_loc, y_loc)

    return panel


# Create diagonal panels
panel_11 = make_figure_panel(
    "GSEA_pathway_ranking.svg",
    scale_x_input=0.45,
    scale_y_input=0.45,
    x_loc=10,
    y_loc=10,
)
panel_22 = make_figure_panel(
    "GSVA_pathway_ranking.svg",
    scale_x_input=0.45,
    scale_y_input=0.45,
    x_loc=210,
    y_loc=200,
)
panel_33 = make_figure_panel(
    "CAMERA_pathway_ranking.svg",
    scale_x_input=0.45,
    scale_y_input=0.45,
    x_loc=410,
    y_loc=400,
)
if platform == "rnaseq":
    panel_44 = make_figure_panel(
        "ORA_pathway_ranking.svg",
        scale_x_input=0.45,
        scale_y_input=0.45,
        x_loc=610,
        y_loc=600,
    )

# +
# Create off-diagonal panels
panel_21 = make_figure_panel(
    "gsea_gsva_compare_ranking.svg",
    scale_x_input=0.45,
    scale_y_input=0.45,
    x_loc=10,
    y_loc=200,
)
panel_31 = make_figure_panel(
    "gsea_camera_compare_ranking.svg",
    scale_x_input=0.45,
    scale_y_input=0.45,
    x_loc=10,
    y_loc=400,
)
if platform == "rnaseq":
    panel_41 = make_figure_panel(
        "gsea_ora_compare_ranking.svg",
        scale_x_input=0.45,
        scale_y_input=0.45,
        x_loc=10,
        y_loc=600,
    )
panel_23 = make_figure_panel(
    "gsva_camera_compare_ranking.svg",
    scale_x_input=0.45,
    scale_y_input=0.45,
    x_loc=210,
    y_loc=400,
)

if platform == "rnaseq":
    panel_24 = make_figure_panel(
        "gsva_ora_compare_ranking.svg",
        scale_x_input=0.45,
        scale_y_input=0.45,
        x_loc=210,
        y_loc=600,
    )
    panel_34 = make_figure_panel(
        "camera_ora_compare_ranking.svg",
        scale_x_input=0.45,
        scale_y_input=0.45,
        x_loc=410,
        y_loc=600,
    )
# -

if platform == "rnaseq":
    figure_1 = sg.SVGFigure("800", "800")
    figure_1.append(
        [
            etree.Element("rect", {"width": "100%", "height": "100%", "fill": "white"}),
            panel_11,
            panel_22,
            panel_33,
            panel_44,
            panel_21,
            panel_31,
            panel_41,
            panel_23,
            panel_24,
            panel_34,
        ]
    )
    display(SVG(figure_1.to_str()))
else:
    figure_1 = sg.SVGFigure("600", "600")
    figure_1.append(
        [
            etree.Element("rect", {"width": "100%", "height": "100%", "fill": "white"}),
            panel_11,
            panel_22,
            panel_33,
            panel_21,
            panel_31,
            panel_23,
        ]
    )
    display(SVG(figure_1.to_str()))

# ## Create heatmap
#
# To compare the different methods as a simplified version of the scatter plots

gsea_percentile = gsea_pathway_summary["Percentile (simulated)"]
gsva_percentile = gsva_pathway_summary["Percentile (simulated)"]
camera_percentile = camera_pathway_summary["Percentile (simulated)"]
ora_percentile = ora_pathway_summary["Percentile (simulated)"]

result = pd.concat(
    [gsea_percentile, gsva_percentile, camera_percentile, ora_percentile],
    axis=1,
    join="inner",
)
result.head()

pathway_method_corr = result.corr()
pathway_method_corr.columns = [
    "GSEA pathway ranking",
    "GSVA pathway ranking",
    "CAMERA pathway ranking",
    "ORA pathway ranking",
]
pathway_method_corr.index = [
    "GSEA pathway ranking",
    "GSVA pathway ranking",
    "CAMERA pathway ranking",
    "ORA pathway ranking",
]
pathway_method_corr

# +
# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(pathway_method_corr, dtype=bool))

# Want diagonal elements as well
mask[np.diag_indices_from(mask)] = False

f = sns.heatmap(
    pathway_method_corr,
    mask=mask,
    vmin=-1,
    vmax=1,
    center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True,
)
f.figure.axes[-1].set_ylabel("Correlation between methods", size=12)

plt.yticks(fontsize=15)
plt.xticks(fontsize=15)
# -

## save generated SVG files
figure_1.save(f"enrichment_paired_plot_{platform}.svg")
f.figure.savefig("enrichment_corr_plot.svg")

# **Takeaway:**
# * Here are the results demonstrating that different enrichment methods can easily be plugged into our simulation workflow to identify generic gene sets
# * Depending on the enrichment method, pathway rankings vary due to the different assumptions and modeling procedures - there is not much concordance between different enrichment methods except GSEA and GSVA using the Powers et. al. dataset. More details about the methods can be found in the [previous notebook](2_apply_enrichment_method.ipynb)
#   * Given that the Powers et. al. dataset is more uniform and GSVA method is sample-wise, which can be more sensitive to noise this would be my guess as to why there is less consistency between the two in the RNA-seq dataset.
# * The generic pathways found in figure 4 [Powers et. al.](https://www.biorxiv.org/content/10.1101/259440v1.full.pdf), were consistent with the top ranked pathways found using GSVA (for both recount2 and Powers et. al. trained models) and GSEA (only for Powers et. al. trained model).
